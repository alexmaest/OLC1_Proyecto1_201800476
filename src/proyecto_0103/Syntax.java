
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto_0103;

import proyecto_0103.ExpressionTree.Expresion;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\010\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\006\004\000" +
    "\002\006\003\000\002\006\004\000\002\007\010\000\002" +
    "\007\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\017\005" +
    "\000\002\017\003\000\002\020\005\000\002\020\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\014\003\000\002\015\004" +
    "\000\002\016\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\004\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\003\005\022\004\001\002\000\010\003" +
    "\uffff\004\uffff\021\uffff\001\002\000\004\024\110\001\002" +
    "\000\010\003\013\004\011\021\015\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\004\027\064" +
    "\001\002\000\012\003\ufff8\004\ufff8\021\ufff8\026\ufff8\001" +
    "\002\000\004\024\063\001\002\000\012\003\042\004\011" +
    "\021\015\026\043\001\002\000\004\025\016\001\002\000" +
    "\004\004\017\001\002\000\004\027\020\001\002\000\010" +
    "\006\025\007\022\010\023\001\002\000\006\020\036\024" +
    "\ufff1\001\002\000\010\017\034\020\uffec\024\uffec\001\002" +
    "\000\004\024\ufff2\001\002\000\006\020\032\024\ufff0\001" +
    "\002\000\010\017\030\020\uffee\024\uffee\001\002\000\004" +
    "\024\027\001\002\000\012\003\ufff6\004\ufff6\021\ufff6\026" +
    "\ufff6\001\002\000\004\006\031\001\002\000\004\024\ufff4" +
    "\001\002\000\004\007\033\001\002\000\006\020\uffed\024" +
    "\uffed\001\002\000\004\007\035\001\002\000\004\024\ufff3" +
    "\001\002\000\004\006\037\001\002\000\006\020\uffef\024" +
    "\uffef\001\002\000\006\003\042\026\043\001\002\000\012" +
    "\003\ufff9\004\ufff9\021\ufff9\026\ufff9\001\002\000\004\024" +
    "\044\001\002\000\010\003\ufffb\004\ufffb\026\ufffb\001\002" +
    "\000\010\003\ufffa\004\ufffa\026\ufffa\001\002\000\006\003" +
    "\050\004\046\001\002\000\004\025\060\001\002\000\010" +
    "\003\uffdf\004\uffdf\023\uffdf\001\002\000\004\024\057\001" +
    "\002\000\010\003\055\004\046\023\052\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\000\001\002\000\010\003" +
    "\uffe0\004\uffe0\023\uffe0\001\002\000\004\024\056\001\002" +
    "\000\004\002\ufffc\001\002\000\010\003\uffde\004\uffde\023" +
    "\uffde\001\002\000\004\005\061\001\002\000\004\024\062" +
    "\001\002\000\010\003\uffdd\004\uffdd\023\uffdd\001\002\000" +
    "\012\003\ufff7\004\ufff7\021\ufff7\026\ufff7\001\002\000\020" +
    "\005\066\011\065\012\071\013\073\014\074\015\075\016" +
    "\072\001\002\000\020\005\066\011\065\012\071\013\073" +
    "\014\074\015\075\016\072\001\002\000\022\005\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\024\uffe4" +
    "\001\002\000\022\005\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\024\uffea\001\002\000\022\005\066" +
    "\011\065\012\071\013\073\014\074\015\075\016\072\024" +
    "\106\001\002\000\020\005\066\011\065\012\071\013\073" +
    "\014\074\015\075\016\072\001\002\000\022\005\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\024\uffe3" +
    "\001\002\000\020\005\066\011\065\012\071\013\073\014" +
    "\074\015\075\016\072\001\002\000\020\005\066\011\065" +
    "\012\071\013\073\014\074\015\075\016\072\001\002\000" +
    "\020\005\066\011\065\012\071\013\073\014\074\015\075" +
    "\016\072\001\002\000\022\005\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\024\uffe9\001\002\000\022" +
    "\005\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\024\uffe8\001\002\000\022\005\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\024\uffe5\001\002\000" +
    "\022\005\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\024\uffe1\001\002\000\022\005\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\024\uffe7\001\002" +
    "\000\020\005\066\011\065\012\071\013\073\014\074\015" +
    "\075\016\072\001\002\000\022\005\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\024\uffe2\001\002\000" +
    "\022\005\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\024\uffeb\001\002\000\012\003\ufff5\004\ufff5\021" +
    "\ufff5\026\ufff5\001\002\000\022\005\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\024\uffe6\001\002\000" +
    "\010\003\ufffe\004\ufffe\021\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\013\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\037\007\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\025\017\020\020\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\050\011\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\052" +
    "\011\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\067\014\066\001\001" +
    "\000\010\014\100\015\106\016\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\104\001\001\000\010" +
    "\014\100\015\101\016\102\001\001\000\002\001\001\000" +
    "\004\014\077\001\001\000\004\014\076\001\001\000\004" +
    "\014\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\100\016\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String error = "";
    public static ArrayList<Integer> hojas = new ArrayList<Integer>();
    public int hoja = 1;

    public void syntax_error(Symbol s){
        error += "Advertencia : Error sint치ctico con \"" + s.value + 
        "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
        Analyzers.errores.add(new Fail(s.left, s.right, "Sint치ctico", "Hay un error con el caracter " + s.value, s.value.toString()));
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    error += "Advertencia : Error sint치ctico irrecuperable con \"" + s.value + 
    "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    Analyzers.errores.add(new Fail(s.left, s.right, "Sint치ctico", "Hay un error con el caracter " + s.value, s.value.toString()));
    }

    public String getSyntaxError() {
        return this.error;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLA_A INSTRUCCIONES SEP SEP SENTENCIAS LLA_C 
            {
              Object RESULT =null;
		int listIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int listIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		ArrayList<Instrucciones> listI = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int listSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int listSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Sentencia> listS = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Analyzers.instrucciones = (ArrayList<Instrucciones>)listI;
    Analyzers.sentencias = (ArrayList<Sentencia>)listS;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LLA_A ::= Llave_a 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLA_A",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LLA_A ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLA_A",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLA_C ::= Llave_c 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLA_C",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLA_C ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LLA_C",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SEP ::= Separador 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SEP",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SEP ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SEP",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int pluralIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Instrucciones> pluralI = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Instrucciones singleI = (Instrucciones)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = pluralI;
    lista.add((Instrucciones)singleI);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int singleIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Instrucciones singleI = (Instrucciones)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = new ArrayList<Instrucciones>();
    lista.add((Instrucciones)singleI);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= error P_coma 
            {
              ArrayList<Instrucciones> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= Conj D_puntos Id Flecha CONJUNTOS P_coma 
            {
              Instrucciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> con = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Instrucciones i = new Instrucciones(id,(ArrayList<Expresion>)con,Instruccion.CONJUNTO);
    RESULT = i;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= Id Flecha REGEXS P_coma 
            {
              Instrucciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> reg = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    hojas.add(hoja);
    hoja = 1;
    Instrucciones i = new Instrucciones(id,(ArrayList<Expresion>)reg,Instruccion.REGEX);
    RESULT = i;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTOS ::= Letra G_ondulado Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r1);
    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTOS ::= Numero G_ondulado Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r1);
    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTOS ::= C_signo 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONJUNTOS ::= LISTA_LETRAS 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> r = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    RESULT = r;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONJUNTOS ::= LISTA_NUMEROS 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> r = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    RESULT = r;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_LETRAS ::= LISTA_LETRAS Coma Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> r1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = r1;
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_LETRAS ::= Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_NUMEROS ::= LISTA_NUMEROS Coma Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> r1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = r1;
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_NUMEROS ::= Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REGEXS ::= REGEXS REGEX 
            {
              ArrayList<Expresion> RESULT =null;
		int pluralRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> pluralR = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion singleR = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = pluralR;
    lista.add((Expresion)singleR);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEXS",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // REGEXS ::= REGEX 
            {
              ArrayList<Expresion> RESULT =null;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion singleR = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    lista.add((Expresion)singleR);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEXS",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REGEX ::= Mas REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // REGEX ::= Interrogacion REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // REGEX ::= Or TWOREGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REGEX ::= Punto TWOREGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REGEX ::= Asterisco REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REGEX ::= Cadena 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    Expresion x = new Expresion(lista);
    RESULT = x;
    hoja+=1;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REGEX ::= Cadena_Ll 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    Expresion x = new Expresion(lista);
    RESULT = x;
    hoja+=1;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TWOREGEX ::= AUXREGEX AUXREGEX 
            {
              ArrayList<String> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<String> r1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    for (int i = 0; i < r1.size(); i++) {
       lista.add(r1.get(i));
    }
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TWOREGEX",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AUXREGEX ::= REGEX 
            {
              ArrayList<String> RESULT =null;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AUXREGEX",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              ArrayList<Sentencia> RESULT =null;
		int pluralSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Sentencia> pluralS = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Sentencia singleS = (Sentencia)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    pluralS.add((Sentencia)singleS);
    RESULT = pluralS;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= SENTENCIA 
            {
              ArrayList<Sentencia> RESULT =null;
		int singleSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Sentencia singleS = (Sentencia)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Sentencia> lista = new ArrayList<Sentencia>();
    lista.add((Sentencia)singleS);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= error P_coma 
            {
              ArrayList<Sentencia> RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Id D_puntos Cadena P_coma 
            {
              Sentencia RESULT =null;
		int idSenleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idSenright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String idSen = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String C = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Sentencia s = new Sentencia(idSen, C);
    RESULT = s;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
