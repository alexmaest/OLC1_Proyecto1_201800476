
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto_0103;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\004\010\000\002\004\006" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\010" +
    "\004\000\002\010\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\013\003\000\002\005\004\000\002\005\003\000\002\006" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\022\004\001\002\000\006\004\007\021" +
    "\012\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\027\047\001\002\000\010\004\ufffe\021" +
    "\ufffe\026\ufffe\001\002\000\010\004\007\021\012\026\036" +
    "\001\002\000\004\025\013\001\002\000\004\004\014\001" +
    "\002\000\004\027\015\001\002\000\010\006\022\007\017" +
    "\010\020\001\002\000\006\020\033\024\ufff8\001\002\000" +
    "\010\017\031\020\ufff3\024\ufff3\001\002\000\004\024\ufff9" +
    "\001\002\000\006\020\027\024\ufff7\001\002\000\010\017" +
    "\025\020\ufff5\024\ufff5\001\002\000\004\024\024\001\002" +
    "\000\010\004\ufffd\021\ufffd\026\ufffd\001\002\000\004\006" +
    "\026\001\002\000\004\024\ufffb\001\002\000\004\007\030" +
    "\001\002\000\006\020\ufff4\024\ufff4\001\002\000\004\007" +
    "\032\001\002\000\004\024\ufffa\001\002\000\004\006\034" +
    "\001\002\000\006\020\ufff6\024\ufff6\001\002\000\010\004" +
    "\uffff\021\uffff\026\uffff\001\002\000\004\004\037\001\002" +
    "\000\004\025\044\001\002\000\006\004\uffe6\023\uffe6\001" +
    "\002\000\006\004\037\023\042\001\002\000\004\002\000" +
    "\001\002\000\006\004\uffe7\023\uffe7\001\002\000\004\005" +
    "\045\001\002\000\004\024\046\001\002\000\006\004\uffe5" +
    "\023\uffe5\001\002\000\020\005\051\011\050\012\055\013" +
    "\056\014\057\015\060\016\054\001\002\000\020\005\051" +
    "\011\050\012\055\013\056\014\057\015\060\016\054\001" +
    "\002\000\022\005\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\024\uffeb\001\002\000\022\005\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\024\ufff1" +
    "\001\002\000\022\005\051\011\050\012\055\013\056\014" +
    "\057\015\060\016\054\024\071\001\002\000\022\005\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\024" +
    "\uffea\001\002\000\020\005\051\011\050\012\055\013\056" +
    "\014\057\015\060\016\054\001\002\000\020\005\051\011" +
    "\050\012\055\013\056\014\057\015\060\016\054\001\002" +
    "\000\020\005\051\011\050\012\055\013\056\014\057\015" +
    "\060\016\054\001\002\000\020\005\051\011\050\012\055" +
    "\013\056\014\057\015\060\016\054\001\002\000\022\005" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\024\ufff0\001\002\000\022\005\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\024\uffef\001\002\000\022" +
    "\005\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\024\uffec\001\002\000\022\005\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\024\uffe8\001\002\000" +
    "\022\005\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\024\uffee\001\002\000\020\005\051\011\050\012" +
    "\055\013\056\014\057\015\060\016\054\001\002\000\022" +
    "\005\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\024\uffe9\001\002\000\022\005\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\024\ufff2\001\002\000" +
    "\010\004\ufffc\021\ufffc\026\ufffc\001\002\000\022\005\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\024" +
    "\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\002\004\001\001\000\006\003\010\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\022\014\015\015\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\040\006\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\052\011\051\001\001\000\010\011\063\012\071\013\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\067\001\001\000\002\001\001\000\010\011\063\012\064" +
    "\013\065\001\001\000\004\011\062\001\001\000\004\011" +
    "\061\001\001\000\004\011\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\063\013\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String error = "";
    public static ArrayList<Integer> hojas = new ArrayList<Integer>();
    public int hoja = 1;

    public void syntax_error(Symbol s){
        error += "Advertencia : Error sintáctico con \"" + s.value + 
        "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    error += "Advertencia : Error sintáctico irrecuperable con \"" + s.value + 
    "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    public String getSyntaxError() {
        return this.error;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Llave_a INSTRUCCIONES Separador SENTENCIAS Llave_c 
            {
              Object RESULT =null;
		int listIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int listIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		ArrayList<Instrucciones> listI = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int listSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int listSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Sentencia> listS = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Analyzers.instrucciones = (ArrayList<Instrucciones>)listI;
    Analyzers.sentencias = (ArrayList<Sentencia>)listS;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int pluralIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Instrucciones> pluralI = (ArrayList<Instrucciones>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Instrucciones singleI = (Instrucciones)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = pluralI;
    lista.add((Instrucciones)singleI);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instrucciones> RESULT =null;
		int singleIleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleIright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Instrucciones singleI = (Instrucciones)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Instrucciones> lista = new ArrayList<Instrucciones>();
    lista.add((Instrucciones)singleI);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= Conj D_puntos Id Flecha CONJUNTOS P_coma 
            {
              Instrucciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> con = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Instrucciones i = new Instrucciones(id,(ArrayList<Expresion>)con,Instruccion.CONJUNTO);
    RESULT = i;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= Id Flecha REGEXS P_coma 
            {
              Instrucciones RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> reg = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    hojas.add(hoja);
    hoja = 1;
    Instrucciones i = new Instrucciones(id,(ArrayList<Expresion>)reg,Instruccion.REGEX);
    RESULT = i;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONJUNTOS ::= Letra G_ondulado Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r1);
    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONJUNTOS ::= Numero G_ondulado Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r1);
    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTOS ::= C_signo 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTOS ::= LISTA_LETRAS 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> r = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    RESULT = r;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTOS ::= LISTA_NUMEROS 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<Expresion> r = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    RESULT = r;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_LETRAS ::= LISTA_LETRAS Coma Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> r1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = r1;
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_LETRAS ::= Letra 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_NUMEROS ::= LISTA_NUMEROS Coma Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		ArrayList<Expresion> r1 = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = r1;
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r2);
    listaStrings.add(r3);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_NUMEROS ::= Numero 
            {
              ArrayList<Expresion> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    ArrayList<String> listaStrings = new ArrayList<String>();

    listaStrings.add(r);

    lista.add(new Expresion(listaStrings));
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REGEXS ::= REGEXS REGEX 
            {
              ArrayList<Expresion> RESULT =null;
		int pluralRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Expresion> pluralR = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion singleR = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = pluralR;
    lista.add((Expresion)singleR);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEXS",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REGEXS ::= REGEX 
            {
              ArrayList<Expresion> RESULT =null;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion singleR = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Expresion> lista = new ArrayList<Expresion>();
    lista.add((Expresion)singleR);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEXS",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REGEX ::= Mas REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REGEX ::= Interrogacion REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REGEX ::= Or TWOREGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // REGEX ::= Punto TWOREGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REGEX ::= Asterisco REGEX 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    Expresion e = new Expresion(lista);
    RESULT = e;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REGEX ::= Cadena 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    Expresion x = new Expresion(lista);
    RESULT = x;
    hoja+=1;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // REGEX ::= Cadena_Ll 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    lista.add(r);
    Expresion x = new Expresion(lista);
    RESULT = x;
    hoja+=1;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TWOREGEX ::= AUXREGEX AUXREGEX 
            {
              ArrayList<String> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<String> r1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		ArrayList<String> r2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    for (int i = 0; i < r1.size(); i++) {
       lista.add(r1.get(i));
    }
    for (int i = 0; i < r2.size(); i++) {
       lista.add(r2.get(i));
    }
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TWOREGEX",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AUXREGEX ::= REGEX 
            {
              ArrayList<String> RESULT =null;
		int r2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Expresion r2 = (Expresion)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<String> lista = new ArrayList<String>();
    for (int i = 0; i < r2.getListaInst().size(); i++) {
       lista.add(r2.getListaInst().get(i));
    }
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AUXREGEX",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              ArrayList<Sentencia> RESULT =null;
		int pluralSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int pluralSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		ArrayList<Sentencia> pluralS = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int singleSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Sentencia singleS = (Sentencia)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    pluralS.add((Sentencia)singleS);
    RESULT = pluralS;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIA 
            {
              ArrayList<Sentencia> RESULT =null;
		int singleSleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int singleSright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Sentencia singleS = (Sentencia)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
    ArrayList<Sentencia> lista = new ArrayList<Sentencia>();
    lista.add((Sentencia)singleS);
    RESULT = lista;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= Id D_puntos Cadena P_coma 
            {
              Sentencia RESULT =null;
		int idSenleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idSenright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		String idSen = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		String C = (String)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
    Sentencia s = new Sentencia(idSen, C);
    RESULT = s;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
