//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package proyecto_0103;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

    public String error = "";

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Syntax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Syntax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\031\000\002\002\004\000\002\002\007\000\002\003"
        + "\004\000\002\003\003\000\002\004\010\000\002\004\006"
        + "\000\002\007\005\000\002\007\005\000\002\007\003\000"
        + "\002\007\003\000\002\007\003\000\002\010\005\000\002"
        + "\010\003\000\002\011\005\000\002\011\003\000\002\012"
        + "\004\000\002\012\004\000\002\012\005\000\002\012\005"
        + "\000\002\012\004\000\002\012\003\000\002\012\003\000"
        + "\002\005\004\000\002\005\003\000\002\006\006"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\065\000\004\005\004\001\002\000\006\004\012\014"
        + "\007\001\002\000\004\002\006\001\002\000\004\002\001"
        + "\001\002\000\004\012\047\001\002\000\010\004\ufffe\011"
        + "\ufffe\014\ufffe\001\002\000\010\004\012\011\036\014\007"
        + "\001\002\000\004\010\013\001\002\000\004\014\014\001"
        + "\002\000\004\012\015\001\002\000\010\015\022\016\017"
        + "\017\020\001\002\000\006\007\ufff8\021\033\001\002\000"
        + "\010\007\ufff3\020\031\021\ufff3\001\002\000\004\007\ufff9"
        + "\001\002\000\006\007\ufff7\021\027\001\002\000\010\007"
        + "\ufff5\020\025\021\ufff5\001\002\000\004\007\024\001\002"
        + "\000\010\004\ufffd\011\ufffd\014\ufffd\001\002\000\004\015"
        + "\026\001\002\000\004\007\ufffb\001\002\000\004\016\030"
        + "\001\002\000\006\007\ufff4\021\ufff4\001\002\000\004\016"
        + "\032\001\002\000\004\007\ufffa\001\002\000\004\015\034"
        + "\001\002\000\006\007\ufff6\021\ufff6\001\002\000\010\004"
        + "\uffff\011\uffff\014\uffff\001\002\000\004\014\037\001\002"
        + "\000\004\010\044\001\002\000\006\006\uffea\014\uffea\001"
        + "\002\000\006\006\042\014\037\001\002\000\004\002\000"
        + "\001\002\000\006\006\uffeb\014\uffeb\001\002\000\004\013"
        + "\045\001\002\000\004\007\046\001\002\000\006\006\uffe9"
        + "\014\uffe9\001\002\000\020\013\057\022\054\023\056\024"
        + "\052\025\050\026\055\034\051\001\002\000\020\013\057"
        + "\022\054\023\056\024\052\025\050\026\055\034\051\001"
        + "\002\000\022\007\uffec\013\uffec\022\uffec\023\uffec\024\uffec"
        + "\025\uffec\026\uffec\034\uffec\001\002\000\020\013\057\022"
        + "\054\023\056\024\052\025\050\026\055\034\051\001\002"
        + "\000\004\007\065\001\002\000\020\013\057\022\054\023"
        + "\056\024\052\025\050\026\055\034\051\001\002\000\020"
        + "\013\057\022\054\023\056\024\052\025\050\026\055\034"
        + "\051\001\002\000\020\013\057\022\054\023\056\024\052"
        + "\025\050\026\055\034\051\001\002\000\022\007\uffed\013"
        + "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\034\uffed"
        + "\001\002\000\020\013\057\022\054\023\056\024\052\025"
        + "\050\026\055\034\051\001\002\000\022\007\ufff0\013\ufff0"
        + "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0\001"
        + "\002\000\022\007\ufff1\013\ufff1\022\ufff1\023\ufff1\024\ufff1"
        + "\025\ufff1\026\ufff1\034\ufff1\001\002\000\020\013\057\022"
        + "\054\023\056\024\052\025\050\026\055\034\051\001\002"
        + "\000\022\007\uffef\013\uffef\022\uffef\023\uffef\024\uffef\025"
        + "\uffef\026\uffef\034\uffef\001\002\000\010\004\ufffc\011\ufffc"
        + "\014\ufffc\001\002\000\022\007\uffee\013\uffee\022\uffee\023"
        + "\uffee\024\uffee\025\uffee\026\uffee\034\uffee\001\002\000\022"
        + "\007\ufff2\013\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026"
        + "\ufff2\034\ufff2\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\065\000\004\002\004\001\001\000\006\003\010\004"
        + "\007\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\004\034\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\010"
        + "\007\022\010\015\011\020\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\005\040\006\037"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\006"
        + "\042\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\012"
        + "\052\001\001\000\004\012\066\001\001\000\002\001\001"
        + "\000\004\012\065\001\001\000\002\001\001\000\004\012"
        + "\062\001\001\000\004\012\061\001\001\000\004\012\057"
        + "\001\001\000\002\001\001\000\004\012\060\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\012\063\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Syntax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Syntax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private Symbol s;

    public void syntax_error(Symbol s) {
        error += "Advertencia : Error sintáctico con \"" + s.value + "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    public Symbol getS() {
        return this.s;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        error += "Advertencia : Error sintáctico irrecuperable con \"" + s.value + "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Syntax$actions {

        private final Syntax parser;

        /**
         * Constructor
         */
        CUP$Syntax$actions(Syntax parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
                int CUP$Syntax$act_num,
                java_cup.runtime.lr_parser CUP$Syntax$parser,
                java.util.Stack CUP$Syntax$stack,
                int CUP$Syntax$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Syntax$result;

            /* select the action based on the action number */
            switch (CUP$Syntax$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)).value;
                    RESULT = start_val;
                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Syntax$parser.done_parsing();
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO ::= Llave_a INSTRUCCIONES Separador SENTENCIAS Llave_c 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 4)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES", 1, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // INSTRUCCIONES ::= INSTRUCCION 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES", 1, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // INSTRUCCION ::= Conj D_puntos Id Flecha CONJUNTOS P_coma 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION", 2, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 5)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // INSTRUCCION ::= Id Flecha REGEX P_coma 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION", 2, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 3)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // CONJUNTOS ::= Letra G_ondulado Letra 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS", 5, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // CONJUNTOS ::= Numero G_ondulado Numero 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS", 5, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // CONJUNTOS ::= C_signo 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS", 5, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // CONJUNTOS ::= LISTA_LETRAS 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS", 5, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // CONJUNTOS ::= LISTA_NUMEROS 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONJUNTOS", 5, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // LISTA_LETRAS ::= LISTA_LETRAS Coma Letra 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS", 6, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // LISTA_LETRAS ::= Letra 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_LETRAS", 6, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // LISTA_NUMEROS ::= LISTA_NUMEROS Coma Numero 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS", 7, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // LISTA_NUMEROS ::= Numero 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LISTA_NUMEROS", 7, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // REGEX ::= Mas REGEX 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // REGEX ::= Interrogacion REGEX 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // REGEX ::= Or REGEX REGEX 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // REGEX ::= Punto REGEX REGEX 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 2)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // REGEX ::= Asterisco REGEX 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // REGEX ::= Cadena 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // REGEX ::= Cadena_Ll 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("REGEX", 8, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 3, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 1)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // SENTENCIAS ::= SENTENCIA 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 3, ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // SENTENCIA ::= Id D_puntos Cadena P_coma 
                {
                    Object RESULT = null;

                    CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 4, ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top - 3)), ((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()), RESULT);
                }
                return CUP$Syntax$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Syntax$act_num + "found in internal parse table");

            }
        }

        /* end of method */
        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Syntax$do_action(
                int CUP$Syntax$act_num,
                java_cup.runtime.lr_parser CUP$Syntax$parser,
                java.util.Stack CUP$Syntax$stack,
                int CUP$Syntax$top)
                throws java.lang.Exception {
            return CUP$Syntax$do_action_part00000000(
                    CUP$Syntax$act_num,
                    CUP$Syntax$parser,
                    CUP$Syntax$stack,
                    CUP$Syntax$top);
        }
    }

    public String getSyntaxError() {
        return this.error;
    }
}
