package proyecto_0103.ThompsonTree;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import proyecto_0103.ExpressionTree.Transition;

parser code
{:
    private Symbol s;
    public static ArrayList<DataText> GraphThompson = new ArrayList<DataText>();
    public static ArrayList<Transition> headers = new ArrayList<Transition>();
    public static ArrayList<Node> nodes = new ArrayList<Node>();

    public static int state = 1;
    public int counter = 0;
    public static int accept = 0;

    public void syntax_error(Symbol s){
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    }
:};
terminal String Cadena;
terminal String Punto;
terminal String Or;
terminal String Asterisco;
terminal String Interrogacion;
terminal String Mas;
terminal String Cadena_Ll;

non terminal INICIO;
non terminal AutoNode REGEXS;
non terminal AutoNode REGEX;
non terminal ArrayList<AutoNode> TWOREGEX;
non terminal AutoNode AUXREGEX;


start with INICIO;

INICIO ::= REGEXS:reg
;

REGEXS ::= REGEXS:pluralR REGEX:singleR
| REGEX:singleR
;

REGEX ::= Mas:r REGEX:r2 
{:
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText((temp+1),temp,"ε",counter));
        nodes.add(new Node((temp+1),"ε",counter,false));
        nodes.add(new Node(temp,"ε",counter,false));
        counter+=1;
        temp+=1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = last;
        accept = last;
    } else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,first,"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(last+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        last = last+1;
        first = first-1;
        state = last+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;
:}
| Interrogacion:r REGEX:r2
{:
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = temp+1;
        accept = last;
    }else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(last+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first-1),(last+1),"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        last = last+1;
        first = first-1;
        state = last+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;
:}
| Or:r TWOREGEX:r2
{:
    ArrayList<AutoNode> array = r2;
    int first = array.get(1).first;
    int last = array.get(0).last;

    int first1 = array.get(1).first;
    int last1 = array.get(1).last;

    int first2 = array.get(0).first;
    int last2 = array.get(0).last;
    AutoNode a;
    if (array.get(0).pass==false && array.get(1).pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
      int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),array.get(0).name,counter));
        nodes.add(new Node(temp,array.get(0).name,counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        temp += 1;
        last = temp+1;
        GraphThompson.add(new DataText(temp,last,"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node(last,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+2),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+2),"ε",counter,false));
        counter+=1;
        temp += 2;
        GraphThompson.add(new DataText(temp,(temp+1),array.get(1).name,counter));
        nodes.add(new Node(temp,array.get(1).name,counter,false));
        nodes.add(new Node((temp+1),array.get(1).name,counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,last,"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node(last,"ε",counter,false));
        counter+=1;
        state = (temp+2);
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else if (array.get(0).pass==true && array.get(1).pass==false){
        GraphThompson.add(new DataText((first2-1),first1,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first2-1),first2,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first1,last1,array.get(1).name,counter));
        nodes.add(new Node(first1,array.get(1).name,counter,false));
        nodes.add(new Node(last1,array.get(1).name,counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first2-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else if (array.get(0).pass==false && array.get(1).pass==true){
        GraphThompson.add(new DataText((first2-1),first2,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first2-1),first1,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(first2,last2,array.get(0).name,counter));
        nodes.add(new Node(first2,array.get(0).name,counter,false));
        nodes.add(new Node(last2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first2-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else{
        GraphThompson.add(new DataText((first1-1),first1,"ε",counter));
        nodes.add(new Node((first1-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first1-1),first2,"ε",counter));
        nodes.add(new Node((first1-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first1-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }
    RESULT = a;
:}
| Punto:r TWOREGEX:r2
{:
    ArrayList<AutoNode> array = r2;
    int first1 = array.get(1).first;
    int last1 = array.get(1).last;

    int first2 = array.get(0).first;
    int last2 = array.get(0).last;
    AutoNode a;

    if (array.get(0).pass==false && array.get(1).pass==false){
        GraphThompson.add(new DataText(first2,last2,array.get(0).name,counter));
        nodes.add(new Node(first2,array.get(0).name,counter,false));
        nodes.add(new Node(last2,array.get(0).name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first1,last1,array.get(1).name,counter));
        nodes.add(new Node(first1,array.get(1).name,counter,false));
        nodes.add(new Node(last1,array.get(1).name,counter,false));
        counter+=1;
        state = last1;
        accept = last1;
        a = new AutoNode(true,array.get(0).name,first2,last1,state);
    } else if (array.get(0).pass==false && array.get(1).pass==true){
        GraphThompson.add(new DataText((first1-1),first1,array.get(0).name,counter));
        nodes.add(new Node((first1-1),array.get(0).name,counter,false));
        nodes.add(new Node(first1,array.get(0).name,counter,false));
        counter+=1;
        state = first1;
        accept = first1;
        a = new AutoNode(true,array.get(0).name,(first1-1),first1,state);
    } else{
        state = array.get(0).max;
        a = new AutoNode(true,array.get(0).name,(first2-1),state,state);
        System.out.println("Entra3");
    } 
    RESULT = a;
:}
| Asterisco:r REGEX:r2
{:
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText((temp+1),temp,"ε",counter));
        nodes.add(new Node((temp+1),"ε",counter,false));
        nodes.add(new Node(temp,"ε",counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = temp+1;
        accept = last;
    }else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,first,"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(single.max+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((single.max+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first-1),(single.max+1),"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node((single.max+1),"ε",counter,false));
        counter+=1;
        last = single.max+1;
        first = first-1;
        state = single.max+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;
:}
| Cadena:r
{:
    AutoNode a = new AutoNode(false,r,state,state+1,state+1);
    headers.add(new Transition(r,0));
    state+=1;
    RESULT = a;
:}
| Cadena_Ll:r
{:
    AutoNode a = new AutoNode(false,r,state,state+1,state+1);
    headers.add(new Transition(r,0));
    state+=1;
    RESULT = a;
:}
;
TWOREGEX ::= AUXREGEX:r1 AUXREGEX:r2
{:
    ArrayList<AutoNode> r = new ArrayList<AutoNode>();
    r.add(r1);
    r.add(r2);
    RESULT = r;
:}
;
AUXREGEX ::= REGEX:r2
{:
    RESULT = r2;
:}
;