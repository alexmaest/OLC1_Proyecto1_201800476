
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto_0103.ThompsonTree;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import proyecto_0103.ExpressionTree.Transition;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Automata2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Automata2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Automata2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Automata2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\005\004\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\020\004\005\005\004\006\011\007\013\010" +
    "\014\011\015\012\012\001\002\000\020\004\005\005\004" +
    "\006\011\007\013\010\014\011\015\012\012\001\002\000" +
    "\022\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\001\002\000\004\002\026\001\002\000" +
    "\022\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\001\002\000\022\002\000\004\005\005" +
    "\004\006\011\007\013\010\014\011\015\012\012\001\002" +
    "\000\020\004\005\005\004\006\011\007\013\010\014\011" +
    "\015\012\012\001\002\000\022\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000" +
    "\020\004\005\005\004\006\011\007\013\010\014\011\015" +
    "\012\012\001\002\000\020\004\005\005\004\006\011\007" +
    "\013\010\014\011\015\012\012\001\002\000\020\004\005" +
    "\005\004\006\011\007\013\010\014\011\015\012\012\001" +
    "\002\000\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\001\002\000\022\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\001\002\000\022\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\001\002\000\022\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\001\002\000\020\004" +
    "\005\005\004\006\011\007\013\010\014\011\015\012\012" +
    "\001\002\000\022\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000\022\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\001\002\000\004\002\001\001\002\000\022\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\002\005\003\007\004\006\001\001\000" +
    "\010\004\020\005\026\006\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\024\001" +
    "\001\000\010\004\020\005\021\006\022\001\001\000\002" +
    "\001\001\000\004\004\017\001\001\000\004\004\016\001" +
    "\001\000\004\004\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\020\006\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Automata2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Automata2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Automata2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public static ArrayList<DataText> GraphThompson = new ArrayList<DataText>();
    public static ArrayList<Transition> headers = new ArrayList<Transition>();
    public static ArrayList<Node> nodes = new ArrayList<Node>();

    public static int state = 1;
    public int counter = 0;
    public static int accept = 0;

    public void syntax_error(Symbol s){
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Automata2$actions {
  private final Automata2 parser;

  /** Constructor */
  CUP$Automata2$actions(Automata2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Automata2$do_action_part00000000(
    int                        CUP$Automata2$act_num,
    java_cup.runtime.lr_parser CUP$Automata2$parser,
    java.util.Stack            CUP$Automata2$stack,
    int                        CUP$Automata2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Automata2$result;

      /* select the action based on the action number */
      switch (CUP$Automata2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		RESULT = start_val;
              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Automata2$parser.done_parsing();
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REGEXS 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode reg = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // REGEXS ::= REGEXS REGEX 
            {
              AutoNode RESULT =null;
		int pluralRleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int pluralRright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		AutoNode pluralR = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode singleR = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEXS",1, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REGEXS ::= REGEX 
            {
              AutoNode RESULT =null;
		int singleRleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int singleRright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode singleR = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEXS",1, ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REGEX ::= Mas REGEX 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode r2 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText((temp+1),temp,"ε",counter));
        nodes.add(new Node((temp+1),"ε",counter,false));
        nodes.add(new Node(temp,"ε",counter,false));
        counter+=1;
        temp+=1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = last;
        accept = last;
    } else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,first,"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(last+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        last = last+1;
        first = first-1;
        state = last+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REGEX ::= Interrogacion REGEX 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode r2 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = temp+1;
        accept = last;
    }else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(last+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first-1),(last+1),"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node((last+1),"ε",counter,false));
        counter+=1;
        last = last+1;
        first = first-1;
        state = last+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // REGEX ::= Or TWOREGEX 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		ArrayList<AutoNode> r2 = (ArrayList<AutoNode>)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    ArrayList<AutoNode> array = r2;
    int first = array.get(1).first;
    int last = array.get(0).last;

    int first1 = array.get(1).first;
    int last1 = array.get(1).last;

    int first2 = array.get(0).first;
    int last2 = array.get(0).last;
    AutoNode a;
    if (array.get(0).pass==false && array.get(1).pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
      int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),array.get(0).name,counter));
        nodes.add(new Node(temp,array.get(0).name,counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        temp += 1;
        last = temp+1;
        GraphThompson.add(new DataText(temp,last,"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node(last,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+2),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+2),"ε",counter,false));
        counter+=1;
        temp += 2;
        GraphThompson.add(new DataText(temp,(temp+1),array.get(1).name,counter));
        nodes.add(new Node(temp,array.get(1).name,counter,false));
        nodes.add(new Node((temp+1),array.get(1).name,counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,last,"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node(last,"ε",counter,false));
        counter+=1;
        state = (temp+2);
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else if (array.get(0).pass==true && array.get(1).pass==false){
        GraphThompson.add(new DataText((first2-1),first1,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first2-1),first2,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first1,last1,array.get(1).name,counter));
        nodes.add(new Node(first1,array.get(1).name,counter,false));
        nodes.add(new Node(last1,array.get(1).name,counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first2-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else if (array.get(0).pass==false && array.get(1).pass==true){
        GraphThompson.add(new DataText((first2-1),first2,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first2-1),first1,"ε",counter));
        nodes.add(new Node((first2-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(first2,last2,array.get(0).name,counter));
        nodes.add(new Node(first2,array.get(0).name,counter,false));
        nodes.add(new Node(last2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first2-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }else{
        GraphThompson.add(new DataText((first1-1),first1,"ε",counter));
        nodes.add(new Node((first1-1),"ε",counter,false));
        nodes.add(new Node(first1,"ε",counter,false));
        counter+=1;
        int maxTemp = array.get(1).max+1;
        GraphThompson.add(new DataText(last1,maxTemp,"ε",counter));
        nodes.add(new Node(last1,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first1-1),first2,"ε",counter));
        nodes.add(new Node((first1-1),"ε",counter,false));
        nodes.add(new Node(first2,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last2,maxTemp,"ε",counter));
        nodes.add(new Node(last2,"ε",counter,false));
        nodes.add(new Node(maxTemp,"ε",counter,false));
        counter+=1;
        state = maxTemp;
        first = first1-1;
        last = maxTemp;
        accept = last;
        a = new AutoNode(true,array.get(0).name,first,last,state);
    }
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // REGEX ::= Punto TWOREGEX 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		ArrayList<AutoNode> r2 = (ArrayList<AutoNode>)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    ArrayList<AutoNode> array = r2;
    int first1 = array.get(1).first;
    int last1 = array.get(1).last;

    int first2 = array.get(0).first;
    int last2 = array.get(0).last;
    AutoNode a;

    if (array.get(0).pass==false && array.get(1).pass==false){
        GraphThompson.add(new DataText(first2,last2,array.get(0).name,counter));
        nodes.add(new Node(first2,array.get(0).name,counter,false));
        nodes.add(new Node(last2,array.get(0).name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first1,last1,array.get(1).name,counter));
        nodes.add(new Node(first1,array.get(1).name,counter,false));
        nodes.add(new Node(last1,array.get(1).name,counter,false));
        counter+=1;
        state = last1;
        accept = last1;
        a = new AutoNode(true,array.get(0).name,first2,last1,state);
    } else if (array.get(0).pass==false && array.get(1).pass==true){
        GraphThompson.add(new DataText((first1-1),first1,array.get(0).name,counter));
        nodes.add(new Node((first1-1),array.get(0).name,counter,false));
        nodes.add(new Node(first1,array.get(0).name,counter,false));
        counter+=1;
        state = first1;
        accept = first1;
        a = new AutoNode(true,array.get(0).name,(first1-1),first1,state);
    } else{
        state = array.get(0).max;
        a = new AutoNode(true,array.get(0).name,(first2-1),state,state);
        System.out.println("Entra3");
    } 
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REGEX ::= Asterisco REGEX 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode r2 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    AutoNode single = r2;
    int first = single.first;
    int last = single.last;
    if (single.pass==false){
        GraphThompson.add(new DataText(first,(first+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((first+1),"ε",counter,false));
        counter+=1;
        int temp = first+1;
        GraphThompson.add(new DataText(temp,(temp+1),single.name,counter));
        nodes.add(new Node(temp,single.name,counter,false));
        nodes.add(new Node((temp+1),single.name,counter,false));
        counter+=1;
        GraphThompson.add(new DataText((temp+1),temp,"ε",counter));
        nodes.add(new Node((temp+1),"ε",counter,false));
        nodes.add(new Node(temp,"ε",counter,false));
        counter+=1;
        temp += 1;
        GraphThompson.add(new DataText(temp,(temp+1),"ε",counter));
        nodes.add(new Node(temp,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(first,(temp+1),"ε",counter));
        nodes.add(new Node(first,"ε",counter,false));
        nodes.add(new Node((temp+1),"ε",counter,false));
        counter+=1;
        last = temp+1;
        state = temp+1;
        accept = last;
    }else{
        GraphThompson.add(new DataText((first-1),first,"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,first,"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node(first,"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText(last,(single.max+1),"ε",counter));
        nodes.add(new Node(last,"ε",counter,false));
        nodes.add(new Node((single.max+1),"ε",counter,false));
        counter+=1;
        GraphThompson.add(new DataText((first-1),(single.max+1),"ε",counter));
        nodes.add(new Node((first-1),"ε",counter,false));
        nodes.add(new Node((single.max+1),"ε",counter,false));
        counter+=1;
        last = single.max+1;
        first = first-1;
        state = single.max+1;
        accept = last;
    }
    AutoNode a = new AutoNode(true,single.name,first,last,state);
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REGEX ::= Cadena 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    AutoNode a = new AutoNode(false,r,state,state+1,state+1);
    headers.add(new Transition(r,0));
    state+=1;
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REGEX ::= Cadena_Ll 
            {
              AutoNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    AutoNode a = new AutoNode(false,r,state,state+1,state+1);
    headers.add(new Transition(r,0));
    state+=1;
    RESULT = a;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("REGEX",2, ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TWOREGEX ::= AUXREGEX AUXREGEX 
            {
              ArrayList<AutoNode> RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).right;
		AutoNode r1 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode r2 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    ArrayList<AutoNode> r = new ArrayList<AutoNode>();
    r.add(r1);
    r.add(r2);
    RESULT = r;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("TWOREGEX",3, ((java_cup.runtime.Symbol)CUP$Automata2$stack.elementAt(CUP$Automata2$top-1)), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUXREGEX ::= REGEX 
            {
              AutoNode RESULT =null;
		int r2left = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()).right;
		AutoNode r2 = (AutoNode)((java_cup.runtime.Symbol) CUP$Automata2$stack.peek()).value;
		
    RESULT = r2;

              CUP$Automata2$result = parser.getSymbolFactory().newSymbol("AUXREGEX",4, ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Automata2$stack.peek()), RESULT);
            }
          return CUP$Automata2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Automata2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Automata2$do_action(
    int                        CUP$Automata2$act_num,
    java_cup.runtime.lr_parser CUP$Automata2$parser,
    java.util.Stack            CUP$Automata2$stack,
    int                        CUP$Automata2$top)
    throws java.lang.Exception
    {
              return CUP$Automata2$do_action_part00000000(
                               CUP$Automata2$act_num,
                               CUP$Automata2$parser,
                               CUP$Automata2$stack,
                               CUP$Automata2$top);
    }
}

}
