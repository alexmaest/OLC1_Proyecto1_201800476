package proyecto_0103.Automatas;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code
{:
    private Symbol s;
    public String error = "";
    public static ArrayList<GraphNode> GraphVariables = new ArrayList<GraphNode>();
    public static ArrayList<String> GraphText = new ArrayList<String>();
    public static ArrayList<Siguiente> nexts = new ArrayList<Siguiente>();
    public int actualHoja = 0;

    public int mas = 1;
    public int interrogacion = 1;
    public int or = 1;
    public int punto = 1;
    public int asterisco = 1;
    public int cadena = 1;
    public int cadenall = 1;
    public static Node primero = new Node("","","","",false,0);
    public static Node head = new Node("","","","",false,0);
    public int index = 1;

    public void syntax_error(Symbol s){
        error += "Advertencia : Error sintáctico con \"" + s.value + 
        "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    public Symbol getS(){
        return this.s;
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    error += "Advertencia : Error sintáctico irrecuperable con \"" + s.value + 
    "\" en la fila " + (s.right + 1) + " y columna " + (s.left + 1) + "\n";
    }

    public String getSyntaxError() {
        return this.error;
    }
:};
terminal String Cadena;
terminal String Punto;
terminal String Or;
terminal String Asterisco;
terminal String Interrogacion;
terminal String Mas;
terminal String Cadena_Ll;
terminal ERROR;

non terminal INICIO;
non terminal Node REGEXS;
non terminal Node REGEX;
non terminal ArrayList<Node> TWOREGEX;
non terminal Node AUXREGEX;


start with INICIO;

INICIO ::= REGEXS:reg
{:System.out.println("Inicio de análisis de automata");:}
;

REGEXS ::= REGEXS:pluralR REGEX:singleR
| REGEX:singleR
{:
    actualHoja +=1;
    nexts.add(new Siguiente(primero.first,Integer.toString(actualHoja)));
    GraphVariables.add(new GraphNode("HASH [style=filled color=lightblue label=<<table border=\"0\">"
                        +"<tr><td bgcolor=\"black\"><font color=\"white\">"+actualHoja+"</font></td><td cellpadding=\"10\">#</td><td bgcolor=\"white\">"+actualHoja+"</td></tr>"
                        +"<tr><td></td><td bgcolor=\"#84ff82\">"+actualHoja+"</td><td></td></tr></table>>];",actualHoja,"#"));
    GraphText.add("P0 -> {"+primero.name+",HASH};\n");
    String first = null;
    String last = null;
    if (primero.anulable==true){
        first = Integer.toString(actualHoja);
        last = primero.last + Integer.toString(actualHoja);
        GraphVariables.add(new GraphNode("P0 [style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
        Node h = new Node(last,".",first,"",false,0);
        head = h;
    }else{
        first = Integer.toString(actualHoja);
        last = primero.last;
        GraphVariables.add(new GraphNode("P0[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
        Node h = new Node(last,".",first,"",false,0);
        head = h;
    }

:}
;

REGEX ::= Mas:r REGEX:r2 
{:

    Node n1 = r2;
    String first = null;
    String last = null;
    boolean anulable = false;
    nexts.add(new Siguiente(n1.first,n1.last));
    GraphText.add("MAS"+mas+"-> {"+n1.name+"};\n");
    if (n1.anulable==true){
        first = n1.first;
        last = n1.last;
        GraphVariables.add(new GraphNode("MAS"+mas+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">+</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"+"));
        anulable = true;
    }else{
        first = n1.first;
        last = n1.last;
        GraphVariables.add(new GraphNode("MAS"+mas+"[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">+</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"+"));
    }
    Node n = new Node(last,r,first,"MAS"+mas,anulable,0);
    primero = n;
    RESULT = n;
    mas+=1;

:}
| Interrogacion:r REGEX:r2
{:

    Node n1 = r2;
    String first = n1.first;
    String last = n1.last;
    boolean anulable = true;
    GraphText.add("IN"+interrogacion+"-> {"+n1.name+"};\n");
    GraphVariables.add(new GraphNode("IN"+interrogacion+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">?</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"?"));
    Node n = new Node(last,r,first,"IN"+interrogacion,anulable,0);
    primero = n;
    RESULT = n;
    interrogacion+=1;

:}
| Or:r TWOREGEX:r2
{:

    ArrayList<Node> array = r2;
    String first = null;
    String last = null;
    boolean anulable = false;
    GraphText.add("OR"+or+"-> {"+array.get(0).name+","+array.get(1).name+"};\n");
    if (array.get(0).anulable==true && array.get(1).anulable==true){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("OR"+or+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">|</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"|"));
        anulable = true;
    }else if (array.get(0).anulable==true && array.get(1).anulable==false){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("OR"+or+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">|</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"|"));
        anulable = true;
    }else if (array.get(0).anulable==false && array.get(1).anulable==true){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("OR"+or+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">|</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"|"));
        anulable = true;
    }else if (array.get(0).anulable==false && array.get(1).anulable==false){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("OR"+or+"[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">|</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"|"));
    }
    Node n = new Node(last,r,first,"OR"+or,anulable,0);
    primero = n;
    RESULT = n;
    or+=1;

:}
| Punto:r TWOREGEX:r2
{:
    ArrayList<Node> array = r2;
    nexts.add(new Siguiente(array.get(0).first,array.get(1).last));
    String first = null;
    String last = null;
    boolean anulable = false;
    GraphText.add("P"+punto+"-> {"+array.get(0).name+","+array.get(1).name+"};\n");
    if (array.get(0).anulable==true && array.get(1).anulable==true){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("P"+punto+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
        anulable = true;
    }else if (array.get(0).anulable==true && array.get(1).anulable==false){
        first = array.get(1).first;
        last = array.get(0).last+","+array.get(1).last;
        GraphVariables.add(new GraphNode("P"+punto+"[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
    }else if (array.get(0).anulable==false && array.get(1).anulable==true){
        first = array.get(0).first+","+array.get(1).first;
        last = array.get(0).last;
        GraphVariables.add(new GraphNode("P"+punto+"[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
    }else if (array.get(0).anulable==false && array.get(1).anulable==false){
        first = array.get(1).first;
        last = array.get(0).last;
        GraphVariables.add(new GraphNode("P"+punto+"[style=filled color=lightblue label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">.</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"."));
    }
    Node n = new Node(last,r,first,"P"+punto,anulable,0);
    primero = n;
    RESULT = n;
    punto+=1;

:}
| Asterisco:r REGEX:r2
{:

    Node n1 = r2;
    String first = n1.first;
    String last = n1.last;
    boolean anulable = true;
    nexts.add(new Siguiente(n1.first,n1.last));
    GraphText.add("AS"+asterisco+"-> {"+n1.name+"};\n");
    GraphVariables.add(new GraphNode("AS"+asterisco+"[style=filled color=\"#ff8282\" label=<<table border=\"0\">"
            +"<tr><td bgcolor=\"black\"><font color=\"white\">"+last+"</font></td><td cellpadding=\"10\">*</td><td bgcolor=\"white\">"+first+"</td></tr>"
            +"</table>>];\n",0,"*"));
    Node n = new Node(last,r,first,"AS"+asterisco,anulable,0);
    primero = n;
    RESULT = n;
    asterisco+=1;

:}
| Cadena:r
{:
    actualHoja+=1;
    String text = r;
    String i = Integer.toString(actualHoja);
    Node n = new Node(i,text,i,"Cad"+cadena,false,index);
    GraphVariables.add(new GraphNode("Cad"+cadena+"[style=filled color=lightblue label=<<table border=\"0\">"
        +"<tr><td bgcolor=\"black\"><font color=\"white\">"+actualHoja+"</font></td><td cellpadding=\"10\">"+text+"</td><td bgcolor=\"white\">"+actualHoja+"</td></tr>"
        +"<tr><td></td><td bgcolor=\"#84ff82\">"+actualHoja+"</td><td></td></tr></table>>];\n",index,text));
    primero = n;
    RESULT = n;
    index+=1;
    cadena+=1;

:}
| Cadena_Ll:r
{:
    actualHoja+=1;
    String text = r;
    String i = Integer.toString(actualHoja);
    Node n = new Node(i,text,i,"Cll"+cadenall,false,index);
    GraphVariables.add(new GraphNode("Cll"+cadenall+"[style=filled color=lightblue label=<<table border=\"0\">"
        +"<tr><td bgcolor=\"black\"><font color=\"white\">"+actualHoja+"</font></td><td cellpadding=\"10\">"+text+"</td><td bgcolor=\"white\">"+actualHoja+"</td></tr>"
        +"<tr><td></td><td bgcolor=\"#84ff82\">"+actualHoja+"</td><td></td></tr></table>>];\n",index,text));
    primero = n;
    RESULT = n;
    index+=1;
    cadenall+=1;
:}
;
TWOREGEX ::= AUXREGEX:r1 AUXREGEX:r2
{:

    ArrayList<Node> r = new ArrayList<Node>();
    r.add(r1);
    r.add(r2);
    RESULT = r;
:}
;
AUXREGEX ::= REGEX:r2
{:
    RESULT = r2;
:}
;